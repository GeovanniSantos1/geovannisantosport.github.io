{"ast":null,"code":"import writeText from 'copy-to-clipboard';\nimport { useCallback } from 'react';\nimport useMountedState from './useMountedState';\nimport useSetState from './useSetState';\n\nvar useCopyToClipboard = function () {\n  var isMounted = useMountedState();\n\n  var _a = useSetState({\n    value: undefined,\n    error: undefined,\n    noUserInteraction: true\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  var copyToClipboard = useCallback(function (value) {\n    if (!isMounted()) {\n      return;\n    }\n\n    var noUserInteraction;\n    var normalizedValue;\n\n    try {\n      // only strings and numbers casted to strings can be copied to clipboard\n      if (typeof value !== 'string' && typeof value !== 'number') {\n        var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      } // empty strings are also considered invalid\n      else if (value === '') {\n        var error = new Error(\"Cannot copy empty string to clipboard.\");\n        if (process.env.NODE_ENV === 'development') console.error(error);\n        setState({\n          value: value,\n          error: error,\n          noUserInteraction: true\n        });\n        return;\n      }\n\n      normalizedValue = value.toString();\n      noUserInteraction = writeText(normalizedValue);\n      setState({\n        value: normalizedValue,\n        error: undefined,\n        noUserInteraction: noUserInteraction\n      });\n    } catch (error) {\n      setState({\n        value: normalizedValue,\n        error: error,\n        noUserInteraction: noUserInteraction\n      });\n    }\n  }, []);\n  return [state, copyToClipboard];\n};\n\nexport default useCopyToClipboard;","map":{"version":3,"names":["writeText","useCallback","useMountedState","useSetState","useCopyToClipboard","isMounted","_a","value","undefined","error","noUserInteraction","state","setState","copyToClipboard","normalizedValue","Error","process","env","NODE_ENV","console","toString"],"sources":["C:/Users/Geovanni Santos/Downloads/portfolio/port/node_modules/react-use/esm/useCopyToClipboard.js"],"sourcesContent":["import writeText from 'copy-to-clipboard';\r\nimport { useCallback } from 'react';\r\nimport useMountedState from './useMountedState';\r\nimport useSetState from './useSetState';\r\nvar useCopyToClipboard = function () {\r\n    var isMounted = useMountedState();\r\n    var _a = useSetState({\r\n        value: undefined,\r\n        error: undefined,\r\n        noUserInteraction: true,\r\n    }), state = _a[0], setState = _a[1];\r\n    var copyToClipboard = useCallback(function (value) {\r\n        if (!isMounted()) {\r\n            return;\r\n        }\r\n        var noUserInteraction;\r\n        var normalizedValue;\r\n        try {\r\n            // only strings and numbers casted to strings can be copied to clipboard\r\n            if (typeof value !== 'string' && typeof value !== 'number') {\r\n                var error = new Error(\"Cannot copy typeof \" + typeof value + \" to clipboard, must be a string\");\r\n                if (process.env.NODE_ENV === 'development')\r\n                    console.error(error);\r\n                setState({\r\n                    value: value,\r\n                    error: error,\r\n                    noUserInteraction: true,\r\n                });\r\n                return;\r\n            }\r\n            // empty strings are also considered invalid\r\n            else if (value === '') {\r\n                var error = new Error(\"Cannot copy empty string to clipboard.\");\r\n                if (process.env.NODE_ENV === 'development')\r\n                    console.error(error);\r\n                setState({\r\n                    value: value,\r\n                    error: error,\r\n                    noUserInteraction: true,\r\n                });\r\n                return;\r\n            }\r\n            normalizedValue = value.toString();\r\n            noUserInteraction = writeText(normalizedValue);\r\n            setState({\r\n                value: normalizedValue,\r\n                error: undefined,\r\n                noUserInteraction: noUserInteraction,\r\n            });\r\n        }\r\n        catch (error) {\r\n            setState({\r\n                value: normalizedValue,\r\n                error: error,\r\n                noUserInteraction: noUserInteraction,\r\n            });\r\n        }\r\n    }, []);\r\n    return [state, copyToClipboard];\r\n};\r\nexport default useCopyToClipboard;\r\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AACA,IAAIC,kBAAkB,GAAG,YAAY;EACjC,IAAIC,SAAS,GAAGH,eAAe,EAA/B;;EACA,IAAII,EAAE,GAAGH,WAAW,CAAC;IACjBI,KAAK,EAAEC,SADU;IAEjBC,KAAK,EAAED,SAFU;IAGjBE,iBAAiB,EAAE;EAHF,CAAD,CAApB;EAAA,IAIIC,KAAK,GAAGL,EAAE,CAAC,CAAD,CAJd;EAAA,IAImBM,QAAQ,GAAGN,EAAE,CAAC,CAAD,CAJhC;;EAKA,IAAIO,eAAe,GAAGZ,WAAW,CAAC,UAAUM,KAAV,EAAiB;IAC/C,IAAI,CAACF,SAAS,EAAd,EAAkB;MACd;IACH;;IACD,IAAIK,iBAAJ;IACA,IAAII,eAAJ;;IACA,IAAI;MACA;MACA,IAAI,OAAOP,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;QACxD,IAAIE,KAAK,GAAG,IAAIM,KAAJ,CAAU,wBAAwB,OAAOR,KAA/B,GAAuC,iCAAjD,CAAZ;QACA,IAAIS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EACIC,OAAO,CAACV,KAAR,CAAcA,KAAd;QACJG,QAAQ,CAAC;UACLL,KAAK,EAAEA,KADF;UAELE,KAAK,EAAEA,KAFF;UAGLC,iBAAiB,EAAE;QAHd,CAAD,CAAR;QAKA;MACH,CAVD,CAWA;MAXA,KAYK,IAAIH,KAAK,KAAK,EAAd,EAAkB;QACnB,IAAIE,KAAK,GAAG,IAAIM,KAAJ,CAAU,wCAAV,CAAZ;QACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EACIC,OAAO,CAACV,KAAR,CAAcA,KAAd;QACJG,QAAQ,CAAC;UACLL,KAAK,EAAEA,KADF;UAELE,KAAK,EAAEA,KAFF;UAGLC,iBAAiB,EAAE;QAHd,CAAD,CAAR;QAKA;MACH;;MACDI,eAAe,GAAGP,KAAK,CAACa,QAAN,EAAlB;MACAV,iBAAiB,GAAGV,SAAS,CAACc,eAAD,CAA7B;MACAF,QAAQ,CAAC;QACLL,KAAK,EAAEO,eADF;QAELL,KAAK,EAAED,SAFF;QAGLE,iBAAiB,EAAEA;MAHd,CAAD,CAAR;IAKH,CAhCD,CAiCA,OAAOD,KAAP,EAAc;MACVG,QAAQ,CAAC;QACLL,KAAK,EAAEO,eADF;QAELL,KAAK,EAAEA,KAFF;QAGLC,iBAAiB,EAAEA;MAHd,CAAD,CAAR;IAKH;EACJ,CA9CgC,EA8C9B,EA9C8B,CAAjC;EA+CA,OAAO,CAACC,KAAD,EAAQE,eAAR,CAAP;AACH,CAvDD;;AAwDA,eAAeT,kBAAf"},"metadata":{},"sourceType":"module"}